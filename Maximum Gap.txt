public class Solution {
    public int maximumGap(int[] num) {
        if (num == null || num.length < 2)
            return 0;
        int min = num[0];
        int max = num[0];
        for (int i: num) {
            if (i < min)
                min = i;
            if (i > max)
                max = i;
        }
        int gap = (int) Math.ceil( (double)(max - min)/(num.length - 1) );
        int[] bucketMin = new int[num.length];
        int[] bucketMax = new int[num.length];
        Arrays.fill(bucketMin, Integer.MAX_VALUE);
        Arrays.fill(bucketMax, Integer.MIN_VALUE);
        
        // assigning elements to buckets
        for (int i : num) {
            if (i == min || i == max)
                continue;
            int index = (i - min)/gap;
            if (bucketMin[index] > i) {
                bucketMin[index] = i;
            }
            if (bucketMax[index] < i) {
                bucketMax[index] = i;
            }
        } // min and max are not added to the buckets.
        
        int previous = min;// the previous largest number.
        int maxGap = gap;
        // scan the buckets
        for (int i = 0; i < num.length; i++) {
            if (bucketMin[i] == Integer.MAX_VALUE && bucketMax[i] == Integer.MIN_VALUE) {
                continue;
            }
            else {
                maxGap = Math.max(maxGap, bucketMin[i] - previous);
                previous = bucketMax[i];
            }
        }
        maxGap = Math.max(maxGap, max - previous);
        
        return maxGap;
    }
}