public class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> result = new ArrayList<Integer>(); // previously written as List<Integer> result = null; 
        // Wrong Answer: Input: [], output: null, expected: [];
        if (matrix == null) {
            return result;
        }
        
        if (matrix.length == 0 || matrix[0].length == 0) {
            return result;
        }
        int nRow = matrix.length;
        int nColumn = matrix[0].length;
        int nLayer = Math.min((nRow-1)/2, (nColumn-1)/2);
        result = new ArrayList<Integer>();
        
        for (int i = 0; i <= nLayer; i ++) {
            // the upper row: the ith row
            for (int j = i; j <= nColumn - 1 - i; j ++) {
                result.add(matrix[i][j]);
            }
            
            // the rightmost column: the nColumn - 1 - i   th column
            for (int j = i + 1; j <= nRow - 1 - i; j ++) {
                result.add(matrix[j][nColumn - 1 -i]);
            }
            
            // the lower row: the nRow - 1 - i   th row
            for (int j = nColumn - 2 -i; j >= i; j --) {
                if (nRow - 1 - i == i) break; // the same row has already been taken care of. !!!!!!!!!!!!!!!!!!!!!!!
                result.add(matrix[nRow - 1 - i][j]);
            }
            
            // the leftmost column: the  ith column
            for (int j = nRow - 2 - i; j >= i+1; j --) {
                if (nColumn - 1 -i == i) break; // the same column has alread been taken care of. !!!!!!!!!!!!!!!!!!!!
                result.add(matrix[j][i]);
            }
        }
        return result;
        
    }
}