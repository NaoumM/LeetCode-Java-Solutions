// recursive solution. It requires repeated calculations
// I think, there should be some dynamic programming approach that can reduce the time complexity.

public class Solution {
    public List<List<Integer>> combine(int n, int k) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if ( k == 0) {
            return result;
        }
        
        if ( n == k) {
            List<Integer> anItem = new ArrayList<Integer>();
            for (int i = 1; i <= n; i ++)
                anItem.add(i);
            result.add(anItem);
            return result;
        }
        
        if ( k == 1) {
            for ( int i = 1; i <= n; i ++) {
                List<Integer> anItem = new ArrayList<Integer>();
                anItem.add(i);
                result.add(anItem);
            }
            return result;
        }
        
        List<List<Integer>> subResultA = combine(n-1, k);
        for (List<Integer> anItem : subResultA) {
            result.add(anItem);
        }
        
        List<List<Integer>> subResultB = combine(n-1, k-1);
        for (List<Integer> anItem : subResultB) {
            List<Integer> newItem = new ArrayList<Integer>(anItem);
            newItem.add(n);
            result.add(newItem);
        }
        
        return result;
        
    }
}