/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    public HashMap<Integer, Integer> hsMap = new HashMap<Integer, Integer>();
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        
        for(int i = 0; i < inorder.length; i ++)
            hsMap.put(inorder[i], i);
        
        int pStart = 0; 
        int pEnd = inorder.length - 1;
        int iStart = 0; 
        int iEnd = inorder.length - 1;
        
        return buildTree(preorder, inorder, pStart, pEnd, iStart, iEnd);
        
    }
    
    public TreeNode buildTree(int[] preorder, int[] inorder, int pStart, int pEnd, int iStart, int iEnd) {
        
        if (pStart == pEnd){
            TreeNode root = new TreeNode(preorder[pStart]);
            return root;
        }
        if (pStart > pEnd) {
            return null;
        }
        
        TreeNode root = new TreeNode(preorder[pStart]);
        int rootIndex = hsMap.get(preorder[pStart]);
        root.left = buildTree(preorder, inorder, pStart + 1, rootIndex -iStart + pStart, iStart, rootIndex - 1);
        root.right = buildTree(preorder, inorder, rootIndex -iStart + pStart + 1, pEnd, rootIndex + 1, iEnd);
        
        return root;
    }
    
}