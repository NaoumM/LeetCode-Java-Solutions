public class Solution {
    public String multiply(String num1, String num2) {
        String result = new String("");
        if (num1 == null || num2 == null)
            return result;
        if (num1.length() == 0 || num2.length() == 0) {
            return result;
        } 
        int len1 = num1.length();
        int len2 = num2.length();
        if (len1 > len2 )
            return multiply(num2, num1);
        
        StringBuilder[] products = new StringBuilder[len2];
        for (int i = 0; i <= len2 - 1; i ++) {
            products[i] = multiplySingleDigitString(num1, num2.charAt(len2 -1-i));
            for (int j = 1; j <= i; j ++) {
                if ( !products[i].toString().equals("0") )
                    products[i].append('0');                
            }

        }
        /*result = "0";
        for (int i = 0; i <= len2 - 1; i ++)
        {
            result = add(result, products[i]);
        }
        return result; // this have time limit exceeded. thus, designed a recursive method: addAll(String[] ); divide and conquer approach.
        // but still time limit exceeded.
        */
        String[] productsString = new String[len2];
        for ( int i = 0; i < len2; i++) {
            productsString[i] = products[i].toString();
        }
        result = addAll(productsString);
        return result;
    }
    public String addAll(String[] products) {
        int nProd = products.length;
        if (nProd == 1)
            return products[0];
        if (nProd == 2)
            return add(products[0], products[1]);
        
        String[] products1 = new String[nProd/2];
        for (int i = 0; i < nProd/2; i ++) {
            products1[i] = products[i];
        }
        String[] products2 = new String[nProd - nProd/2];
        for (int i = 0; i < nProd - nProd/2; i ++) {
            products2[i] = products[nProd/2 + i];
        }
        String result1 = addAll(products1);
        String result2 = addAll(products2);
        String result = add(result1, result2);
        return result; 
    }
    public StringBuilder multiplySingleDigitString(String s1, char ch) {
        int sLen = s1.length();
        int carry = 0;
        int digit = ch - '0';
        StringBuilder result = new StringBuilder();
        if (digit == 0) {
            result.append('0');
            return result;
        }
        if (digit == 1) {
            return new StringBuilder(s1);
        }
        
        for (int i = sLen - 1; i >= 0; i--) {
                int prod = (s1.charAt(i) - '0') * digit + carry;
                carry = prod/10;
                int newDigit = prod - carry*10;
                result.append((char)(newDigit + '0'));
        }
        if (carry != 0) {
            result.append((char)(carry +'0'));
        }
        result.reverse();
        return result;
        
    }
    
    public String add(String s1, String s2) {
        int len1 = s1.length();
        int len2 = s2.length();
        StringBuilder resultStringBuilder = new StringBuilder();
        int maxLen = Math.max(len1, len2);
        int carry = 0;
        for (int i = 0; i <= maxLen-1; i ++) {
            int digit1 = 0;
            int digit2 = 0;
            if ( i <= len1 - 1)
                digit1 = s1.charAt(len1 - 1 - i) - '0';
            if ( i <= len2 - 1)
                digit2 = s2.charAt(len2 - 1 - i) - '0';
            int newDigit = digit1 + digit2 + carry;
            carry = newDigit/10;
            newDigit = newDigit - carry*10;
            resultStringBuilder.append((char) (newDigit + '0'));
        }
        if (carry != 0) {
            resultStringBuilder.append((char) (carry+'0'));
        }
        resultStringBuilder.reverse();
        String result = resultStringBuilder.toString();
        return result;
    }
}