/**
 * Definition for binary tree with next pointer.
 * public class TreeLinkNode {
 *     int val;
 *     TreeLinkNode left, right, next;
 *     TreeLinkNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void connect(TreeLinkNode root) {
        if (root == null)  {
            return;
        }
        TreeLinkNode levelStart = root;
        TreeLinkNode current = levelStart;
        TreeLinkNode prev = null;

        while (levelStart != null) {
            current = levelStart;
            levelStart = null;
            prev = null;
            while (current != null) {
                if (current.left == null && current.right == null) {
                    current = current.next;
                }
                else if (current.left != null && current.right == null) {
                    if (levelStart == null) {
                        levelStart = current.left;
                    }
                    if (prev == null) {
                        prev = current.left;
                    }
                    else {
                        prev.next = current.left;
                        prev = prev.next;
                    }
                    current = current.next;
                }
                else if (current.left == null && current.right != null) {
                    if (levelStart == null) {
                        levelStart = current.right;
                    }
                    if (prev == null) {
                        prev = current.right;
                    }
                    else {
                        prev.next = current.right;
                        prev = prev.next;
                    }
                    current = current.next;
                }
                else { // current.left != null && current.right != null
                    if (levelStart == null) {
                        levelStart = current.left;
                    }
                    if (prev == null) {
                        prev = current.left;
                        prev.next = current.right;
                        prev = prev.next;
                    }
                    else {
                        prev.next = current.left;
                        current.left.next = current.right;
                        prev = current.right;
                    }
                    current = current.next;
                }
            }
            
            
        }
        
        
    }
}