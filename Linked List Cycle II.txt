/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        boolean hasCycle = false;
        while (slow != null && fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast) {
                hasCycle = true;
                break;
            }
        }
        
        if (hasCycle == false) {
            return null;
        }
        else {
            // the slow pointer starts at the meeting location.
            // another pointer starts at the begining.
            // both with speed one.
            ListNode newBegin = head;
            while (slow != newBegin) {
                slow = slow.next;
                newBegin = newBegin.next;
            }
            return slow;
        }
    }
}