public class Solution {
    public int largestRectangleArea(int[] height) {
        Stack<Integer> indexStk = new Stack<Integer>();
        
        int i = 0;
        int hLen = height.length;
        int maxArea = 0;
        
        for (i = 0; i < hLen; i++) {
            if (indexStk.isEmpty() || height[i] >= height[indexStk.peek()]) {
                indexStk.push(i);
            } else {  // height[i] < height[indexStk.top], calculate only when necessary.
                while( !indexStk.isEmpty() && height[i] < height[indexStk.peek()] ) {
                    int bar = height[indexStk.pop()];
                    int thisArea = bar * (indexStk.isEmpty() ? i : i - indexStk.peek() - 1);
                    maxArea = Math.max(maxArea, thisArea);
                }
                
                indexStk.push(i); // after poping out previous greater values. need to push the current index!!!!!!!!!!!!!!!!!
            }
        }
        // after this, i = hLen;
        while (!indexStk.isEmpty()) {
            int bar = height[indexStk.pop()];
            int thisArea = bar * (indexStk.isEmpty()? i: i - indexStk.peek() - 1);
            maxArea = Math.max(maxArea, thisArea);
        }
        return maxArea;
        
    }
}