public class Solution {

    //based on level order traversal
    public void connect(TreeLinkNode root) {

        TreeLinkNode head = null; //head of the next level
        TreeLinkNode prev = null; //the leading node on the next level
        TreeLinkNode cur = root;  //current node of current level

        while (cur != null) {
	    // whether there is one more level.

            while (cur != null) { //iterate on the current level
	    // whether we have reached the end of the current level.
	    // if null, reached the end of the current level, 
	    // we need to go to the next level.
            // not null, continue in the current level.

                //left child
                if (cur.left != null) {
                    if (prev != null) { // prev node is intialized already.
                        prev.next = cur.left;
                    } else { // not initialized, meaning that at this momnet,
                             // no node is found. thus set the head node, because this is the first node in the next level.
                        head = cur.left;
                    }
                    prev = cur.left; // update the previous node.
                }
                //right child
                if (cur.right != null) {
                    if (prev != null) {
                        prev.next = cur.right;
                    } else {
                        head = cur.right;
                    }
                    prev = cur.right;
                }
                //move to next node
                cur = cur.next;
            }

            //move to next level
            cur = head;
	    // head records the first node in the next level,
	    // if null, no more levels.

            head = null;
            prev = null;
        }

    }
}


// when traversing the root (the 0th level), the root node's next pointer does not need to be modified.
// we are modifying the first level nodes' next pointers
// when traversing the first level nodes, we are modifying the second level nodes' next pointers.