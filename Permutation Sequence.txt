public class Solution {
    public String getPermutation(int n, int k) {
        int[] factorial = new int[n];
        factorial[0] = 1;
        for (int i = 1; i <= n-1; i ++) {
            factorial[i] = factorial[i-1] * i;
        }
        
        int[] index = new int[n];
        for (int i = n-1; i >= 1; i --) {
            index[i] = (k-1)/factorial[i]; // the offset !!!
            k = k - index[i]*factorial[i];
        }
        
        HashSet<Integer> usedInt = new HashSet<Integer>();
        
        String result = new String("");
        for (int i = n-1; i >= 1; i--) {
            int digit = 0;
            for (int j = 0; j <= index[i]; j++) {
                digit = digit + 1;
                while (usedInt.contains(digit)) {
                    digit = digit + 1;
                }
            }

            usedInt.add(digit); // the actual digit !!!
            result = result + Character.toString((char) (digit + '0'));
        }
        
        for (int i = 1; i <= n; i++) {
            if (! usedInt.contains(i) ) {
                result = result + Character.toString((char) (i + '0'));
            }
        }
        
        return result;
    }
}
