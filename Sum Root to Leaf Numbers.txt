/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int sumNumbers(TreeNode root) {
        if (root == null) {
            return 0;
        }
        TreeNode cur = root;
        Stack<TreeNode> stk = new Stack<TreeNode>();
        stk.push(cur);
        int result = 0;
        while (!stk.isEmpty()) {
            cur = stk.peek();
            if (cur.left == null && cur.right == null) {
                // a leaf is encountered:
                // get the number, and go to the next position.
                result = result + getTheNumber(stk);
                backtrack(stk);
            }
            else if (cur.left != null) {
                cur = cur.left;
                stk.push(cur);
            } //
            else { // cur.left == null && cur.right != null
                cur = cur.right;
                stk.push(cur);
            }
        }
        return result;
    }
    public int getTheNumber(Stack<TreeNode> stk) {
        int number = 0;
        ArrayList<TreeNode> aList = new ArrayList<TreeNode>(stk);
        for (TreeNode aNode:aList) {
            number = 10 * number + aNode.val;
        }
        return number;
    }
    public void backtrack(Stack<TreeNode> stk) {
        if (stk.isEmpty()){
            return;
        }
        TreeNode top = stk.pop();
        if (stk.isEmpty()) {
            backtrack(stk);
        }
        else{  // need an else here!!!!!!!!!!!!!!!!!!!!!!!
            TreeNode newTop = stk.peek();
            if (newTop.left == top && newTop.right !=null) {
                stk.push(newTop.right);
            }
            else { // newTop.left == top && newTop.right == null
               // or, newTop.right == top.
                backtrack(stk);
            }
        }
    }
}