/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> merge(List<Interval> intervals) {
        if (intervals == null || intervals.size() == 0 || intervals.size() == 1) {
            return intervals;
        }
        
        List<Interval> initialIntervals = new ArrayList<Interval>();
        initialIntervals.add(intervals.get(0));
        
        List<Interval> result = null;
        for(int i = 1; i <=  intervals.size() -1; i ++) {
            result = insert(initialIntervals, intervals.get(i));
            initialIntervals = result;
        }
        
        return result;
        
    }
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        List<Interval> newIntervals = new ArrayList<Interval>();
        if (intervals == null && newInterval == null) {
            return newIntervals;
        }
        if ( (intervals == null || intervals.size() == 0) && newInterval != null) {
            newIntervals.add(newInterval);
            return newIntervals;
        }
        
        if (intervals != null && newInterval == null) {
            for (Interval aInterval : intervals) {
                newIntervals.add(aInterval);
            }
        }
        // finding the start point of the interval that contains the newInterval;
        int start = intervals.get(0).start;
        int end = intervals.get(0).end;
        int nInterval = intervals.size();
        for (int i = 0; i <= nInterval-1; i ++) {
            if (newInterval.start <= intervals.get(i).start ) {
                start = newInterval.start;
                break;
            } else if (newInterval.start > intervals.get(i).start && newInterval.start <= intervals.get(i).end ) {
                start = intervals.get(i).start;
                break;
            } else if (newInterval.start > intervals.get(i).end ) {
                if (i== nInterval - 1) {
                    start = newInterval.start;
                }
            }
        }
        // finding the end point of the interval that contains the newInterval;        
        for (int i = 0; i <= nInterval - 1; i ++) {
            if (newInterval.end < intervals.get(i).start ) {
                end = newInterval.end;
                break;
            } else if (newInterval.end >= intervals.get(i).start && newInterval.end <= intervals.get(i).end ) {
                end = intervals.get(i).end;
                break;
            } else if ( newInterval.end > intervals.get(i).end ) {
                if (i == nInterval - 1) {
                    end = newInterval.end;
                }
            }
        }
        
        // insert the new Interval
        boolean inserted = false; // whether has been inserted;
        
        for (int i = 0; i <= nInterval - 1; i++) {
            if ( intervals.get(i).end < start ) {
                newIntervals.add(intervals.get(i)); // not included in the interval that contains the newInterval, so add it.
            }
            else if (intervals.get(i).start > end ) {
                if (inserted == false) {
                    newIntervals.add(new Interval(start, end));
                    inserted = true; // maintain the order;
                }
                newIntervals.add(intervals.get(i)); // not included in the interval that contains the newInterval, so add it.
            } else {
                Interval aNewInterval = new Interval(start, end);
                newIntervals.add(aNewInterval);
                inserted = true;
                while(i <= nInterval - 1 && intervals.get(i).end <= end ) {i++;}
                i--;
            }
        }
        
        if (inserted == false) {
            newIntervals.add(new Interval(start, end ));
        }
        
        return newIntervals;
        
    }

}
