public class Solution {
    public String convert(String s, int nRows) {
        String newString = null;
        if (s == null)
            return newString;
        int sLen = s.length();
        newString = new String("");
        if (sLen == 0) {
            return newString;
        }
        if (nRows == 1) { //////////////// this is a special case!!!!
            newString = new String(s);
            return newString;
        }
            
        for (int i = 0; i <= nRows - 1; i ++) { // each iteration taking care of the ith row.
            if (i == 0) {
                for (int pos = 0; pos <= sLen - 1; pos = pos + 2*nRows -2) {
                    newString = newString + Character.toString(s.charAt(pos));
                }
            } else if (i == nRows - 1) {
                for (int pos = nRows - 1; pos <= sLen - 1; pos = pos + 2*nRows - 2) {
                    newString = newString + Character.toString(s.charAt(pos));
                }
            } else {
                for (int pos = i; pos <= sLen - 1; pos = pos + 2*nRows - 2) {
                    newString = newString + Character.toString(s.charAt(pos));
                    int secondPos = pos + 2*(nRows -i - 1);
                    if (secondPos <= sLen-1) { // every time, make sure the position you are trying to access is valid!!!!
                        newString = newString + Character.toString(s.charAt(secondPos) );
                    }
                }                
            }
        }

        return newString;
        
    }
}