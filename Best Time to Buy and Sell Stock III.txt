public class Solution {
    public int maxProfit(int[] prices) {
        
        if (prices == null || prices.length == 0)
            return 0;
        
        int pLen = prices.length;
        int[] maxProfitOne = new int[pLen];
        maxProfitOne[0] = 0;
        int lowest = prices[0];
        for (int i = 1; i <= pLen - 1; i++ ) {
            maxProfitOne[i] = Math.max(maxProfitOne[i-1], prices[i] - lowest);
            if (prices[i] < lowest) {
                lowest = prices[i];
            }
        }
        // maxProfitOne[i] is the maximum profit of buying after day 0 and sell before day i;
        
        int[] maxProfitTwo = new int[pLen];
        maxProfitTwo[pLen - 1] = 0;
        int highest = prices[pLen - 1];
        for (int i = pLen - 2; i >= 0; i --) {
            maxProfitTwo[i] = Math.max(maxProfitTwo[i+1], highest - prices[i]);
            if (prices[i] > highest) {
                highest = prices[i]; 
            }
        }
        // maxProfitTwo[i] is the maximum profit of buying after day i and sell before day pLen - 1;
        
        int maxProfit = 0;
        
        for (int i = 0; i <= pLen - 1; i++) {
            maxProfit = Math.max(maxProfit, maxProfitOne[i] + maxProfitTwo[i]);
        }
        
        return maxProfit;        
    }
}